package model;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

/**
 * This class contains the variables and methods that describe a
 * HolidayBooking object.
 */
public class HolidayBooking extends Booking {
    private FlightBooking flight;
    private String accommodationName;
    private String accommodationAddress;
    private LocalDate checkIn;
    private LocalDate checkOut;
    private double singleNightCost;
    private double singleFlightCost;
    private double totalCost;

    /**
     * Accessor method for flight.
     * @return copy of flight object.
     */
    public FlightBooking getFlight() {
        return flight;
    }

    /**
     * Accessor method for accommodationName.
     * @return copy of accommodationName.
     */
    public String getAccommodationName() {
        return accommodationName;
    }

    /**
     * Accessor method for accommodationAddress.
     * @return copy of accommodationAddress.
     */
    public String getAccommodationAddress() {
        return accommodationAddress;
    }

    /**
     * Accessor method for checkIn.
     * @return copy of checkIn.
     */
    public LocalDate getCheckIn() {
        return checkIn;
    }

    /**
     * Accessor method for checkOut.
     * @return copy of checkOut.
     */
    public LocalDate getCheckOut() {
        return checkOut;
    }

    /**
     * Accessor method for singleNightCost.
     * @return copy of singleNightCost.
     */
    public double getSingleNightCost() {
        return singleNightCost;
    }

    /**
     * Accessor method for totalCost.
     * @return copy of totalCost.
     */
    public double getTotalCost() {
        return totalCost;
    }

    /**
     * Mutator method for checkIn. (Used for updating check-in)
     * @param checkIn Check-in entered by user.
     */
    public void setCheckIn(LocalDate checkIn) {
        this.checkIn = checkIn;
    }

    /**
     * Mutator method for checkOut. (Used for updating check-out)
     * @param checkOut Check-out entered determined by number of nights
     *                 entered by the user.
     */
    public void setCheckOut(LocalDate checkOut) {
        this.checkOut = checkOut;
    }

    /**
     * Class constructor to instantiate a HolidayBooking object.
     * @param customerName Customer's name.
     * @param flight FlightBooking object created for this object.
     * @param accommodationName Name of the accommodation provided by the
     *                          program by user choice.
     * @param accommodationAddress  Accommodation address provided by the
     *                              program.
     * @param singleNightCost Cost per night at the accommodation provided by
     *                       the program.
     * @param checkIn Date of check-in entered by the user.
     * @param checkOut Check-out date generated by the program by taking
     *                 the number of nights from user.
     */
    public HolidayBooking(String customerName,
                          FlightBooking flight,
                          String accommodationName,
                          String accommodationAddress,
                          double singleNightCost,
                          LocalDate checkIn,
                          LocalDate checkOut) {
        super(customerName);
        this.flight = flight;
        this.accommodationName = accommodationName;
        this.accommodationAddress = accommodationAddress;
        this.checkIn = checkIn;
        this.checkOut = checkOut;
        this.singleNightCost = singleNightCost;
    }

    /**
     * Overloaded constructor to instantiate a HolidayBooking for loading
     * data from files to array.
     * @param bookingID BookingID of booking.
     * @param customerName Customer's name.
     * @param bookingDate Date the booking is made.
     * @param invoiceNo Invoice number of booking.
     * @param flightObject FlightBooking object created for this object.
     * @param accommodationName Name of accommodation.
     * @param accommodationAddress Address of accommodation.
     * @param checkIn Check-In date.
     * @param checkOut Check-Out date.
     * @param singleNightCost Cost per night at accommodation.
     * @param totalCost Total Cost of this booking.
     */
    public HolidayBooking(int bookingID,
                          String customerName,
                          LocalDate bookingDate,
                          int invoiceNo,
                          FlightBooking flightObject,
                          String accommodationName,
                          String accommodationAddress,
                          LocalDate checkIn,
                          LocalDate checkOut,
                          double singleNightCost,
                          double totalCost) {
        this.setCustomerName(customerName);
        this.setCustomerName(customerName);
        this.setBookingID(bookingID);
        this.setInvoiceNo(invoiceNo);
        this.setBookingDate(bookingDate);
        this.flight = flightObject;
        this.accommodationName = accommodationName;
        this.accommodationAddress = accommodationAddress;
        this.checkIn = checkIn;
        this.checkOut = checkOut;
        this.singleNightCost = singleNightCost;
        this.totalCost = totalCost;
    }

    /**
     * Method to calculate booking cost.
     * @param fr FlightRecords object created from files.
     */
    @Override
    public void calculateBookingCost(FlightRecords fr) {
        double accommodationTotalCost = this.singleNightCost*getNoNights();
        this.singleFlightCost = fr.getFlightCost();
        double totalFlightCost = this.singleFlightCost*this.flight.passengerCount();
        this.totalCost = accommodationTotalCost + totalFlightCost;
    }

    /**
     * Method to print the details of this holiday booking.
     */
    @Override
    public void printBookingDetails() {
        super.printBookingDetails();
        System.out.println("***** Flight *****");
        this.flight.printFlightInfo();
        System.out.println("***** Accommodation *****");
        System.out.printf("Accommodation Name: %s\n", this.accommodationName);
        System.out.printf("Address: %s\n", this.accommodationAddress);
        System.out.printf("Check-In: %s\n", this.checkIn.toString());
        System.out.printf("Check-Out: %s\n", this.checkOut.toString());
        System.out.printf("No. of Nights: %d\n", getNoNights());
        System.out.println("*************************************\n");
    }

    /**
     * Method to view invoice for this holiday booking.
     */
    @Override
    public void viewInvoice() {
        super.viewInvoice();
        this.flight.printPassengerLine(this.singleFlightCost);
        System.out.printf("%-50s%-10d%-10.2f%-20.2f\n",
                this.accommodationName + "(nights)", getNoNights(),
                this.singleNightCost, this.singleNightCost*getNoNights());
        System.out.printf("%70s%.2f\n", "TOTAL COST: $", this.totalCost);
        System.out.println("-------\n");
    }

    /**
     * Method to get the number of nights between check-in and check-out dates.
     * [2]
     * @return number of nights.
     */
    private long getNoNights() {
        long nights = ChronoUnit.DAYS.between(checkIn, checkOut);
        return nights;
    }
}