package controller;

import model.BookingDataModel;
import model.BookingException;

import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;

/**
 * This class works with the model and view to manage the flow of data
 * between the Booking, records and file handling classes to update the view.
 */
public class BookingManagementController {
    private BookingDataModel model;

    /**
     * Constructor of the controller.
     */
    public BookingManagementController() {
        this.model = new BookingDataModel();
    }

    /**
     * Method to check if a flight exists to the destination provided by user.
     * @param destination String destination entered by the user.
     * @throws BookingException propagates to user when a flight does not exist
     *                          in a destination.
     * @throws IOException propagates to user when an error occurs with opening
     *                      the record files.
     */
    public void checkFlightExists(String destination) throws BookingException, IOException {
        this.model.checkFlightExists(destination);
    }

    /**
     * Method to return a String array of accommodations.
     * @param destination String destination entered by the user to check for
     *                   accommodations that exist there.
     * @return String array of accommodation names.
     */
    public String[] getAccommodationList(String destination) {
        return this.model.getAccommodationList(destination);
    }

    /**
     * Method to create a FlightBooking object and add it to the array.
     * @param name Customer's name.
     * @param destination Destination entered by user.
     * @param departureDate Date of departure entered by user.
     * @param passengers String array of passengers.
     * @return BookingID as determined by the program.
     * @throws BookingException propagates to user when a flight does not exist
     *                          in a destination.
     * @throws IOException propagates to user when an error occurs with opening
     *                      the record files.
     */
    public int addFlightBooking(String name, String destination,
                                 LocalDate departureDate,
                                 ArrayList<String> passengers) throws BookingException, IOException {
        return model.addFlightBooking(name, destination,
                departureDate, passengers);
    }

    /**
     * Method to create a HolidayBooking object and add it to the array.
     * @param customerName Customer's name.
     * @param destination Destination entered by user.
     * @param departureDate Date of departure entered by user.
     * @param passengers String array of passengers
     * @param accommodationName Accommodation name provided by the records
     *                          chosen by the user.
     * @param checkIn Date of check-in entered by the user.
     * @param checkOut Check-out date generated by the program by taking the
     *                 number of nights from user.
     * @return BookingID as determined by the program.
     * @throws BookingException propagates to user when a flight does not exist
     *                          in a destination.
     * @throws IOException propagates to user when an error occurs with opening
     *                      the record files.
     */
    public int addHolidayBooking(String customerName, String destination,
                                  LocalDate departureDate,
                                  ArrayList<String> passengers,
                                  String accommodationName,
                                  LocalDate checkIn,
                                  LocalDate checkOut) throws BookingException, IOException {
        return model.addHolidayBooking(customerName, destination, departureDate,
                passengers, accommodationName, checkIn, checkOut);
    }

    /**
     * Method to print details of all the bookings.
     */
    public void printAllDetails() {
        this.model.printAllBookingDetails();
    }

    /**
     * Method to print an itinerary containing flight information with
     * provided bookingID.
     * @param bookingID BookingID entered by the user to find booking.
     */
    public void printItinerary(int bookingID) {
        this.model.printItinerary(bookingID);
    }

    /**
     * Method to update a holiday booking check-in and check-out dates.
     * @param bookingID BookingID entered by the user to find booking.
     * @param checkIn Date of check-in entered by the user.
     * @param checkOut Check-out date generated by the program by taking
     *                 the number of nights from user.
     * @throws IOException  propagates to user when an error occurs with
     *                      opening the record files.
     */
    public void updateHolidayBooking(int bookingID, LocalDate checkIn,
                                     LocalDate checkOut) throws IOException {
        this.model.updateHolidayBooking(bookingID, checkIn, checkOut);
    }

    /**
     * Method to check if a booking ID exists in the array.
     * @param bookingID BookingID entered by the user.
     * @return true if ID exists, false if it doesn't.
     */
    public boolean checkBookingIDExist(int bookingID) {
        return this.model.checkBookingIDExist(bookingID);
    }

    /**
     * Method to check if a booking is a HolidayBooking.
     * @param bookingID BookingID entered by the user.
     * @return true if booking is HolidayBooking, false if it is not.
     */
    public boolean checkBookingIsHoliday(int bookingID) {
        return this.model.checkBookingIsHoliday(bookingID);
    }

    /**
     * Method to view the invoice for a booking.
     * @param bookingID BookingID entered by the user.
     */
    public void viewInvoice(int bookingID) {
        this.model.viewSingleInvoice(bookingID);
    }

    /**
     * Method to get the departure date of a booking.
     * @param bookingID BookingID entered by the user.
     * @return LocalDate object of the departure date of a booking.
     */
    public LocalDate getDepartureDate(int bookingID) {
        return this.model.getDepartureDate(bookingID);
    }

    /**
     * Method to set the departure date of a booking.
     * @param bookingID BookingID entered by the user.
     * @param departureDate Departure date entered by the user.
     */
    public void setDepartureDate(int bookingID, LocalDate departureDate) {
        this.model.setDepartureDate(bookingID, departureDate);
    }

    /**
     * Method to save array data to files.
     * @throws IOException propagates to user when an error occurs with
     *                      opening the record files.
     */
    public void saveToFiles() throws IOException {
        this.model.saveToFiles();
    }

    /**
     * Method to load data from files to the array.
     * @throws IOException propagates to user when an error occurs with
     *                      opening the record files.
     */
    public void loadFiles() throws IOException {
        this.model.loadFiles();
    }
}